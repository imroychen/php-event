<?php
namespace iry\e\drivers;

use iry\e\App;
use iry\e\drivers;

/**
 * Class Sqlite
 * 使用方式 @Sqlite?dsn=PDO DSN&table=Table Name
 * @package iry\e\drivers
 */

class Sqlite extends drivers\Db
{
    private $_db;
    protected function _init($args, $rawArgs)
    {
        //database=/21andy.com/21andy.sqlite
        parent::_init($args, $rawArgs); // TODO: Change the autogenerated stub
        $this->_db = new \PDO($args['dsn']);
    }

    /**
     * @param string $sql
     * @return array
     */
    protected function _query($sql)
    {
        //query sql
        $sth = $this->_db->prepare($sql);
        if($sth) {
            $sth->execute();
            $result = $sth->fetchAll(\PDO::FETCH_CLASS);
            return $this->_itemToArray($result);
        }
        return [];
    }

    /**
     * @param string $sql
     * @param string $sqlType
     * @return bool
     */

    protected function _exec($sql,$sqlType)
    {
        return $this->_db->exec($sql);
    }

    //异步写入,弥补Sqlite并发写入慢及锁死的缺陷
    public function create($data,$time){
        $data['starting_time'] = $time;
        $data['id'] = $this->_createUniqId($data);

        $fCnt = $this->_getQueueName();
        file_put_contents($fCnt,serialize($data),FILE_APPEND);
        return $data['id'];
    }
    private function _asyncCreate($fCnt){
        if(!file_exists($fCnt)){ return false;}

        $f = App::getTempPath('ir-e-sqlite-create-task');
        file_put_contents($f, App::getTempPath(uniqid()));

        $cnt = file_get_contents($fCnt);
        $list = explode("\n",$cnt);
        foreach ($list as $_item) {
            $_item = trim($_item);
            $data = unserialize($_item);
            if (!empty($data)) {
                $id = $data['id'];

                if (!$this->_exist($id)) {

                    $values = [];
                    $fields = [];

                    foreach ($data as $_field => $v) {
                        $fields[] = '`' . $_field . '`';
                        $values[] = var_export($v, true);
                    }
                    $fieldsStr = implode(',', $fields);
                    $valuesStr = implode(',', $values);
                    $res = $this->_exec('insert into '.$this->_table.' (' . $fieldsStr . ') values (' . $valuesStr . ')', 'insert');
                }
            }
        }
        unlink($fCnt);
        return true;
    }

    private function _getQueueName(){
        $f = App::getTempPath('ir-e-sqlite-create-task');
        $fCnt = file_get_contents($f);
        if(!$fCnt) {
            $fCnt = App::getTempPath(uniqid());
            file_put_contents($f, $fCnt);
        }
        return $fCnt;
    }


    public function scan(){
        $queueName = $this->_getQueueName();
        $this->_asyncCreate($queueName);
        return parent::scan();
    }


}


